#!/usr/bin/perl 
use 5.034 ; use warnings ; # 最新版に近いPerlで動くようにするのが望ましい。
#use 5.014 ; use warnings ; # 古いものでも動くようにする。 v5.14 は 2011年5月14日 にリリースされている。
use Time::HiRes qw [ gettimeofday tv_interval ] ;
my ${ dt_start } = [ gettimeofday ] ; 
use Encode qw[ decode_utf8 encode_utf8 ] ; 
use Getopt::Std ; getopts '@:d:g:l:m:wy:' , \my %o  ; 
use Term::ANSIColor qw[ color :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use FindBin qw[ $Script ] ; 

$o{g}//=20 ; # 最大何個表示させるか
$o{m}//=2 ; # 何重以上を出力するか
$o{l}//=2 ; # 何文字以上　の反復を出力するか 
my $help = 0  ; # オンラインヘルプの文面の表示をしたか否か。
my $readLines  ; # 読み取った行数
$o{'@'} //= 15 ; # 何秒おきにアラームを発生させるか
my $sep = $o{w} ? qr/(\ +)/ : qr// ; # どういう単位で区切るか? 半角空白か文字単位でばらばらにするのか? 

$o{d} = decode_utf8 ( $o{d} ) if exists $o{d} ;

our @y_ranges ; 
& y_init () ;
my $d3 = sub($) { $_[0] =~ s/(?<=\d)(?=(\d\d\d)+($|\D))/,/gr } ;# 3桁区切り　千進法表記

$SIG{INT} = sub { $SIG{INT} = sub { exit } ; & output  } ;
binmode STDIN , "utf8" ; 
binmode STDOUT , "utf8" ;
binmode STDERR , "utf8" ;
my $T0 ; # $T0{最初の文字}{2番目の文字}..{''} のようなツリー構造にする。 #$x->{文字1} ->{""} = [親の参照ref (0),その注目文字(1) ,出現頻度(2) ] のような、長さ4の無名配列のデータを作る。
my @Th ; #  @{ $Th[ 考える文字列の長さ ] } は、 \ $T0{.}{.}..{.}　をリストで格納する。 そのリファレンスから、頻度を参照する
my %Th_seen ; 

$SIG{ALRM} = sub { say STDERR FAINT BOLD $d3->($.) .  " lines read ; " . sprintf "%02d:%02d:%02d" , ( localtime )[2,1,0]  ; alarm $o{'@'} ; } ; 

alarm $o{'@'} ; 

sub B ($$$) { # 3個の変数は、  ( 親へのリファレンス, 注目文字, 処理中文字列の左から何文字目であるか ) 
  my ($R,$C,$L) = @_ ; 
  my $Rc = \ $$R -> { $C } ; # 子へのリファレンスを 生成している  $$_[0] -> { $_[1]} はエラーが出た謎あり。${$_[0]} -> { $_[1]} で対処出来た。
  $$Rc->{''}[0] = $R ; # 親へのリファレンス  
  $$Rc->{''}[1] = $C ; # 注目文字 
  $$Rc->{''}[2] ++ ;   # 頻度
  push @{ $Th [ $L ] } , $Rc unless $Th_seen { $Rc } ++ ;  
  return ( $Rc ) ; # 生成した子(与えられた文字に対応している)のリファレンスを返す。
}

#use utf8 ; 
my $rest ; 
#say RED $o{d} ;
while ( <> ) { # { 各行について }
  chomp ; 
  s/\r$// ; # Windows形式の改行に対応。

  if (exists $o{d} && m/(.*?[$o{d}])(.*)/ ) { $_ = $1 ; $rest = $2 }
  my @C = split /$sep/o , $_ , 0 ; # 各文字 にバラバラにする。
  while ( defined ( $_ = shift @C ) )  { # { 各行の 文字列を左から一文字ずつ削り出して 処理 }
    my $L = 0 ; # 格納した文字が左から何番目であるか。 (逆方向に辿るときには、(最終的に?)文字列の長さ にするので 前置++とした) Length 
    my $R = \$T0 ; # & B ( \$T0 , $_ , ++ $L ) ; # refrence ;
    for ($_ , @C) { $R = & B ( $R , $_ , ++ $L ) } ; # <- 糖衣構文  for 文
  }
  #say YELLOW $_ ; 
  if (defined $rest) { $_ = $rest ; $rest = undef ; redo } ; 
} continue {
  $readLines ++ ; 
}

sub output {  
  say UNDERLINE join "\t", qw[ len frq content ] ; 
  for my $L ( reverse $o{l} .. $#Th ) {
    my @Rs = sort { $$b->{''}[2] <=> $$a->{''}[2] } grep { $$_->{''}[2] >= $o{m} } @{ $Th[$L] } ; 
    for my $R ( @Rs ) {
      my $f ; # Frequency 頻度 
      my $s = '' ; # string 文字列 
      $f = $$R->{''}[2] ;  
      while ( $R != \$T0 ) {
        #$$R->{''}[2] = 0 if $$R->{''}[2] == $f ;
        $s = $$R->{''}[1] . $s ; # 左に文字追加。
        $R = $$R->{''}[0] ; 
      }
      say join "\t" , ($L//'.') , $f , "'$s'"  if &y_filter ( $f ) && $o{g} -- ;
      return if $o{g} == 0 ; 
      #next ;
      #  # 重複除去処理
      my @C = split /$sep/o , $s , 0 ; # 各文字 にバラバラにする。
      while ( defined ( $_ = shift @C ) ) { # { 各行の 文字列を左から一文字ずつ削り出して 処理 }
        my $R = \$T0 ; 
        for ( $_ , @C ) { 
          my $Rc = \ $$R -> { $_ } ; 
          $$Rc->{''}[2] = 0 if ($$Rc->{''}[2]//0) == $f ; # <-- - //0 の必要性を消したい。
          $R = $Rc ; 
        }
      } # {重複除去処理の終わり}
    } # { ある長さを持つ、ひとつひとつのリファレンスに対する処理}
  } # { 長い順に、各長さごとの処理の終わり }
}

& output ; 
exit 0 ;

END {
  exit if $help ;
  my $procsec = sprintf "%.5f", tv_interval ${ dt_start } ; # このプログラムの処理にかかった秒数。比較する2個の時刻は秒単位なので、±1秒未満の誤差は発生する。
  return if ($o{2}//'') eq 0 ; 
  my $s = tv_interval $dt_start , [ gettimeofday ] ; 
  say STDERR BOLD FAINT ITALIC " -- $Script ; " . $procsec . " sec. in process ; " . $readLines . " lines read." ;
}


##
sub y_init ( ) { 
  my @ranges = split /,/o , $o{y} // '' , -1 ; 
  grep { $_ = $_ . ".." . $_ unless m/\.\./ }  @ranges ; # = split /,/ , $o{y} // '' , -1 ; 
  do { m/^(\d*)\.\.(\d*)/ ; push @y_ranges , [ $1||1 , $2||'Inf' ] } for @ranges ; 
}
sub y_filter ( $ ) { 
  do { return not 0 if $_->[0] <= $_[0] && $_[0] <= $_->[1] } for @y_ranges ; 
  return @y_ranges ? not 1 : not 0 ; # 指定が無かった場合はとにかく真を返す。
}



## ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
  use FindBin qw[ $Script ] ; 
  $ARGV[1] //= '' ;
  open my $FH , '<' , $0 ;
  while(<$FH>){
    s/\$0/$Script/g ;
    print $_ if s/^=head1// .. s/^=cut// and $ARGV[1] =~ /^o(p(t(i(o(ns?)?)?)?)?)?$/i ? m/^\s+\-/ : 1;
  }
  close $FH ;
  exit 0 ;
}

=encoding utf8

=head1 $0 

  同じ文字列が複数回出現していないかを調べる。 
  長いものを優先し、その次に出現回数の多いものを検出する。

使用例 :
  longrepeat /etc/passwd  # 指定されたファイルの中身から、何度も出現する文字列が出力される。

  cat dohyo.txt | perl -pe 's/。/。\n/g'  | perl -pe 's/、/、\n/g' | time longrepeat
    # 青空文庫で最も長い「道標」(約84万文字)をそのまま処理できないので、句読点ごとにわざと改行文字をいれて処理。 

  たとえば教員であれば、多数の学生から集めたレポートに対して、全く同じ言い回しで長いものを検出するのに使える。 
   (下記の -y のオプションを使うことで、大人数の学生が共通して使う言い回しは、頻度多すぎなので、出力しないという条件設定も可能。)
  
  Wikipedia の各国言語のさまざまなページの内容で試すのも、興味深い結果を見ることが出来るであろう。
   その場合は、ピリオドなどの句読点の直後に、改行文字を加えるなどの処理が望ましい。

  ひとつのテキストの文書に対して、「～～という表現が丁度7回出現した」と言ったような形容をして特徴付けができるので、
  文書の分かり易い特徴付けができると言える。(汎用性と分かり易さ、再現性が確保できる特徴付けである。)

オプション : 

  -d STR : 改行文字に加えて、STRの各文字(例 。、)を区切りに追加する(日本語を短く切る効果)。行数の表示を変えない便利さあり。  

  -g  N : 何個まで取り出すか。(未指定なら20)
  -m  N : 何回以上の頻度(出現回数)の場合に出力するか。(未指定なら2)
  -l  N : 何文字以上の場合に出力するか。(未指定なら2)  

  -w    : 文字単位でばらばらにするのではなくて、半角空白文字で分けて処理する。このことで、英文等で単語単位で処理しやすくなる。
  -y  range : 出力する頻度の条件を、2個のピリオド(..)とコンマ(,)で指示する。(3..10,20..30などと表記。) 
  -@  N : 標準入力から読み取った行数を N 秒ごとに 標準エラー出力に 出力する。(未指定なら15)
  --help : このオンラインのヘルプ画面を出力する。 perldoc $0 や man $0 でも可能であろう。

開発メモ : 
  * 検出する文字数で長いものは制限するオプションを実装したい。
  * 経験上 100kB 以上の入力は時間が1分程度かかったり、さらに、だんだん読み取りも遅くなるので、注意。
  * 改行文字で区切って処理を している。そして、長さが n の行は 、O(n²)の手間をかけて処理をする。
     したがって、日本語であれば、句読点ごとに改行文字を入れる前処理をしてから この longrepeatを実施すると、
     メモリー消費も少なくなって、フリーズもしにくくなり、実行時間も短くできる。
  * 出力順序に関して。len(文字列長)とfrq(頻度)の積が多い順(ただしmin{frq,len}>=2)となるような出力オプションを実装したい。

=cut

